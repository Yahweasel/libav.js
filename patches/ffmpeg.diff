diff --git a/PATCHED b/PATCHED
new file mode 100644
index 0000000..416a6d1
--- /dev/null
+++ b/PATCHED
@@ -0,0 +1 @@
+PATCHED
diff --git a/fftools/ffmpeg.c b/fftools/ffmpeg.c
index e7384f0..70ef330 100644
--- a/fftools/ffmpeg.c
+++ b/fftools/ffmpeg.c
@@ -653,6 +653,34 @@ static void ffmpeg_cleanup(int ret)
     }
     term_exit();
     ffmpeg_exited = 1;
+
+vstats_file = NULL;
+
+nb_frames_dup = 0;
+dup_warning = 1000;
+nb_frames_drop = 0;
+decode_error_stat[0] = 0;
+decode_error_stat[1] = 0;
+nb_output_dumped = 0;
+
+want_sdp = 1;
+
+progress_avio = NULL;
+
+subtitle_out = NULL;
+
+input_streams = NULL;
+nb_input_streams = 0;
+input_files   = NULL;
+nb_input_files   = 0;
+
+output_streams = NULL;
+nb_output_streams = 0;
+output_files   = NULL;
+nb_output_files   = 0;
+
+filtergraphs = NULL;
+nb_filtergraphs = 0;
 }
 
 void remove_avoptions(AVDictionary **a, AVDictionary *b)
@@ -4513,7 +4541,8 @@ static int64_t getmaxrss(void)
 #endif
 }
 
-int main(int argc, char **argv)
+int ffmpeg_main(int argc, char **argv);
+int ffmpeg_main(int argc, char **argv)
 {
     int i, ret;
     BenchmarkTimeStamps ti;
diff --git a/fftools/ffprobe.c b/fftools/ffprobe.c
index 608d905..aee5f65 100644
--- a/fftools/ffprobe.c
+++ b/fftools/ffprobe.c
@@ -90,8 +90,11 @@ typedef struct InputFile {
     int       nb_streams;
 } InputFile;
 
+#if 0
+/* Disabled so that we can have both mains in one program */
 const char program_name[] = "ffprobe";
 const int program_birth_year = 2007;
+#endif
 
 static int do_bitexact = 0;
 static int do_count_frames = 0;
@@ -382,6 +385,57 @@ static void ffprobe_cleanup(int ret)
 #if HAVE_THREADS
     pthread_mutex_destroy(&log_mutex);
 #endif
+
+do_bitexact = 0;
+do_count_frames = 0;
+do_count_packets = 0;
+do_read_frames  = 0;
+do_read_packets = 0;
+do_show_chapters = 0;
+do_show_error   = 0;
+do_show_format  = 0;
+do_show_frames  = 0;
+do_show_packets = 0;
+do_show_programs = 0;
+do_show_streams = 0;
+do_show_stream_disposition = 0;
+do_show_data    = 0;
+do_show_program_version  = 0;
+do_show_library_versions = 0;
+do_show_pixel_formats = 0;
+do_show_pixel_format_flags = 0;
+do_show_pixel_format_components = 0;
+do_show_log = 0;
+do_show_chapter_tags = 0;
+do_show_format_tags = 0;
+do_show_frame_tags = 0;
+do_show_program_tags = 0;
+do_show_stream_tags = 0;
+do_show_packet_tags = 0;
+show_value_unit              = 0;
+use_value_prefix             = 0;
+use_byte_value_binary_prefix = 0;
+use_value_sexagesimal_format = 0;
+show_private_data            = 1;
+show_optional_fields = SHOW_OPTIONAL_FIELDS_AUTO;
+print_format = NULL;
+stream_specifier = NULL;
+show_data_hash = NULL;
+read_intervals = NULL;
+read_intervals_nb = 0;
+find_stream_info  = 1;
+options = NULL;
+input_filename = NULL;
+print_input_filename = NULL;
+iformat = NULL;
+output_filename = NULL;
+hash = NULL;
+nb_streams = 0;
+nb_streams_packets = NULL;
+nb_streams_frames = NULL;
+selected_streams = NULL;
+log_buffer = NULL;
+log_buffer_size = 0;
 }
 
 struct unit_value {
@@ -3740,6 +3794,8 @@ static int opt_print_filename(void *optctx, const char *opt, const char *arg)
     return 0;
 }
 
+#if 0
+/* Disabled so that we can have both mains in one program */
 void show_help_default(const char *opt, const char *arg)
 {
     av_log_set_callback(log_callback_help);
@@ -3750,6 +3806,7 @@ void show_help_default(const char *opt, const char *arg)
     show_help_children(avformat_get_class(), AV_OPT_FLAG_DECODING_PARAM);
     show_help_children(avcodec_get_class(), AV_OPT_FLAG_DECODING_PARAM);
 }
+#endif
 
 /**
  * Parse interval specification, according to the format:
@@ -4020,7 +4077,8 @@ static inline int check_section_show_entries(int section_id)
             do_show_##varname = 1;                                      \
     } while (0)
 
-int main(int argc, char **argv)
+int ffprobe_main(int argc, char **argv);
+int ffprobe_main(int argc, char **argv)
 {
     const Writer *w;
     WriterContext *wctx;
diff --git a/libavcodec/libopenh264enc.c b/libavcodec/libopenh264enc.c
index db252aa..86c9c92 100644
--- a/libavcodec/libopenh264enc.c
+++ b/libavcodec/libopenh264enc.c
@@ -400,7 +400,7 @@ static int svc_encode_frame(AVCodecContext *avctx, AVPacket *avpkt,
     sp.iPicHeight = avctx->height;
 
     if (frame->pict_type == AV_PICTURE_TYPE_I) {
-        (*s->encoder)->ForceIntraFrame(s->encoder, true);
+        (*s->encoder)->ForceIntraFrame(s->encoder, true, -1);
     }
 
     encoded = (*s->encoder)->EncodeFrame(s->encoder, &sp, &fbi);
diff --git a/libavformat/file.c b/libavformat/file.c
index 98c9e81..f232791 100644
--- a/libavformat/file.c
+++ b/libavformat/file.c
@@ -40,6 +40,8 @@
 #include "os_support.h"
 #include "url.h"
 
+#include <emscripten.h>
+
 /* Some systems may not have S_ISFIFO */
 #ifndef S_ISFIFO
 #  ifdef S_IFIFO
@@ -108,12 +110,31 @@ static const AVClass pipe_class = {
     .version    = LIBAVUTIL_VERSION_INT,
 };
 
+/* libav.js */
+EM_JS(void, libavjs_wait_reader, (int fd), {
+    return Asyncify.handleAsync(function() {
+        return new Promise(function(res) {
+            Module.ff_reader_dev_waiters.push(res);
+        });
+    });
+});
+/* /libav.js */
+
 static int file_read(URLContext *h, unsigned char *buf, int size)
 {
     FileContext *c = h->priv_data;
     int ret;
     size = FFMIN(size, c->blocksize);
     ret = read(c->fd, buf, size);
+
+    /* libav.js */
+    while (ret < 0 && errno == EAGAIN) {
+        /* wait for more data */
+        libavjs_wait_reader(c->fd);
+        ret = read(c->fd, buf, size);
+    }
+    /* /libav.js */
+
     if (ret == 0 && c->follow)
         return AVERROR(EAGAIN);
     if (ret == 0)
diff --git a/libavformat/oggdec.c b/libavformat/oggdec.c
index 3b19e0b..474d82d 100644
--- a/libavformat/oggdec.c
+++ b/libavformat/oggdec.c
@@ -319,10 +319,12 @@ static int ogg_read_page(AVFormatContext *s, int *sid, int probing)
     int flags, nsegs;
     uint64_t gp;
     uint32_t serial;
-    uint32_t crc, crc_tmp;
+    uint32_t crc /*, crc_tmp*/;
     int size = 0, idx;
     int64_t version, page_pos;
+#if 0
     int64_t start_pos;
+#endif
     uint8_t sync[4];
     uint8_t segments[255];
     uint8_t *readout_buf;
@@ -359,12 +361,14 @@ static int ogg_read_page(AVFormatContext *s, int *sid, int probing)
         return AVERROR_INVALIDDATA;
     }
 
+#if 0
     /* 0x4fa9b05f = av_crc(AV_CRC_32_IEEE, 0x0, "OggS", 4) */
     ffio_init_checksum(bc, ff_crc04C11DB7_update, 0x4fa9b05f);
 
     /* To rewind if checksum is bad/check magic on switches - this is the max packet size */
     ffio_ensure_seekback(bc, MAX_PAGE_SIZE);
     start_pos = avio_tell(bc);
+#endif
 
     version = avio_r8(bc);
     flags   = avio_r8(bc);
@@ -372,10 +376,14 @@ static int ogg_read_page(AVFormatContext *s, int *sid, int probing)
     serial  = avio_rl32(bc);
     avio_skip(bc, 4); /* seq */
 
+#if 0
     crc_tmp = ffio_get_checksum(bc);
+#endif
     crc     = avio_rb32(bc);
+#if 0
     crc_tmp = ff_crc04C11DB7_update(crc_tmp, (uint8_t[4]){0}, 4);
     ffio_init_checksum(bc, ff_crc04C11DB7_update, crc_tmp);
+#endif
 
     nsegs    = avio_r8(bc);
     page_pos = avio_tell(bc) - 27;
@@ -407,6 +415,7 @@ static int ogg_read_page(AVFormatContext *s, int *sid, int probing)
         return ret < 0 ? ret : AVERROR_EOF;
     }
 
+#if 0
     if (crc ^ ffio_get_checksum(bc)) {
         av_log(s, AV_LOG_ERROR, "CRC mismatch!\n");
         if (idx < 0)
@@ -426,6 +435,7 @@ static int ogg_read_page(AVFormatContext *s, int *sid, int probing)
         *sid = -1;
         return 0;
     }
+#endif
 
     /* CRC is correct so we can be 99% sure there's an actual change here */
     if (idx < 0) {
